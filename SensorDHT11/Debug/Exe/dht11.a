;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.14 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 11/15/2022
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega8535
;Program type            : Application
;AVR Core Clock frequency: 12.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 128
;*******************************************************/
;
;#include <mega8535.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;#include "dht/dht.c"
;//  How to access GPIO registers from C-code on the Raspberry-Pi
;//  Example program
;//  15-January-2012
;//  Dom and Gert
;//
;
;/*
;$ wget http://www.open.com.au/mikem/bcm2835/bcm2835-1.8.tar.gz
;$ tar -zxvf bcm2835-1.8.tar.gz
;$ cd bcm2835-1.8
;$ ./configure
;$ make
;$ sudo make install
;Then compile the Adafruit_DHT program with
;gcc DHT.c -l bcm2835 -std=gnu99 -o DHT
;*/
;
;// Access from ARM Running Linux
;
;#define BCM2708_PERI_BASE        0x20000000
;#define GPIO_BASE                (BCM2708_PERI_BASE + 0x200000) /* GPIO controller */
;
;
;#include <stdio.h>
;#include <string.h>
;#include <stdlib.h>
;#include <dirent.h>
;#include <fcntl.h>
;#include <assert.h>
;#include <unistd.h>
;#include <sys/mman.h>
;#include <sys/types.h>
;#include <sys/stat.h>
;#include <sys/time.h>
;#include <bcm2835.h>
;#include <unistd.h>
;
;#define MAXTIMINGS 100
;
;//#define DEBUG
;
;#define DHT11 11
;#define DHT22 22
;#define AM2302 22
;
;int readDHT(int type, int pin);
;
;int main(int argc, char **argv)
; 0000 001A {

	.CSEG
;PCODE: $0000000D VOL: 0
;  if (!bcm2835_init())
;	argc -> Y+2
;	*argv -> Y+0
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;        return 1;
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;
;  if (argc != 3) {
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;    printf("usage: %s [11|22|2302] GPIOpin#\n", argv[0]);
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;    printf("example: %s 2302 4 - Read from an AM2302 connected to GPIO #4\n", argv[0]);
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;    return 2;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;  }
;  int type = 0;
;PCODE: $00000033 VOL: 0
;  if (strcmp(argv[1], "11") == 0) type = DHT11;
;	argc -> Y+1
;	*argv -> Y+-1
;	type -> R16,R17
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;  if (strcmp(argv[1], "22") == 0) type = DHT22;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;  if (strcmp(argv[1], "2302") == 0) type = AM2302;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;  if (type == 0) {
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;    printf("Select 11, 22, 2302 as type!\n");
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;    return 3;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;  }
;
;  int dhtpin = atoi(argv[2]);
;PCODE: $00000064 VOL: 0
;
;  if (dhtpin <= 0) {
;PCODE: $00000065 VOL: 0
;	argc -> Y+2
;	*argv -> Y+0
;	type -> R16,R17
;	dhtpin -> Y+0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;    printf("Please select a valid GPIO pin #\n");
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;    return 3;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;  }
;
;
;  printf("Using pin #%d\n", dhtpin);
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;  readDHT(type, dhtpin);
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;  return 0;
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;
;} // main
;PCODE: $0000008A VOL: 0

	.DSEG
_0x8:
	.BYTE 0xB
;
;
;int bits[250], data[100];
;int bitidx = 0;
;
;int readDHT(int type, int pin) {

	.CSEG
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;  int counter = 0;
;  int laststate = HIGH;
;  int j=0;
;
;  // Set GPIO pin to output
;  bcm2835_gpio_fsel(pin, BCM2835_GPIO_FSEL_OUTP);
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;	type -> Y+8
;	pin -> Y+6
;	counter -> R16,R17
;	laststate -> R18,R19
;	j -> R20,R21
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;
;  bcm2835_gpio_write(pin, HIGH);
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;  usleep(500000);  // 500 ms
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;  bcm2835_gpio_write(pin, LOW);
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;  usleep(20000);
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;
;  bcm2835_gpio_fsel(pin, BCM2835_GPIO_FSEL_INPT);
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;
;  data[0] = data[1] = data[2] = data[3] = data[4] = 0;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;
;  // wait for pin to drop?
;  while (bcm2835_gpio_lev(pin) == 1) {
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;    usleep(1);
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;  }
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;
;  // read data!
;  for (int i=0; i< MAXTIMINGS; i++) {
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
